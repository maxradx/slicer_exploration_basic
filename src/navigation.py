###This script is intended to work only in 3DSlicer python console.


############## CONFIGURATION FILE BEGIN #######################################

# Here a python file has been selected as a config file since its convenience
# for path accessibility and debugging. Please note that plenty of file types
# can be used for configuration (e.g. .yaml file).

# TO DO. Minimum step required (1):
# 1) Set the folder_path variable

# 1) Replace this value by the absolute path of your current project folder.
folder_path = "/Users/maximebouthillier/gitmax/code/myrepos/slicer_exploration_basic"

# Make sure to not try copy paste your data and that there is no .DS_Store file
# is in your data folder. For exploration, please try only with .nrrd data.

# Optional configuration for the images:
# If your images are not stored in the data_folder named data under the
# current folder path, replace "data" by the path of your data_folder:
data_path = "data" #data folder for example (sample data from 3DSlicer, renamed)
# data_path = "/Users/maximebouthillier/gitmax/code/myrepos/slicer_exploration_basic/data"
# data_path = "/Users/maximebouthillier/gitmax/data_confid/praxis"


# If you want to load the last image automatically in 3DSlicer, you need to :
# 1) Create in the home folder a file named .slicerrc.py
# 2) Open .slicerrc.py in an IDE
# 3) Add the absolute path of your python script file.
# Example : exec(open("/Users/maximebouthillier/gitmax/code/myrepos/slicer_exploration_basic/src/navigation.py").read())

# This value allows to reload the last viewed volume.
# When you click on next or back, the saved_file.txt will be created
# automatically.
saved_file = "lastview.txt"


#####################   DO NOT EDIT BELOW   ###################################

import os

# Path configuration between repo and data
# folder_path = os.path.dirname(os.path.realpath(__file__))
if data_path == "data":
    file_data_path = os.path.join(folder_path, data_path)
else :
    file_data_path = data_path

# print(file_data_path)

# Location where the saved_file to reload will be saved
last_volume_file = os.path.join(folder_path, saved_file)

# Uncomment the following to see the following path set for your project.
# print(folder_path)
# print(file_data_path)
# print(last_volume_file)


############## CONFIGURATION FILE END #########################################

import slicer
import qt
import ctk
import vtk

# Load volumes in 3DSlicer
file_names = os.listdir(file_data_path)

for file_name in file_names:
    file_path = os.path.join(file_data_path, file_name)
    slicer.util.loadVolume(file_path)

# Creation and navigation from the GUI
class VolumeViewerWidget:
    def __init__(self):
        # Some code generated by ChatGPT
        # Create a collapsible button
        self.collapsible_button = ctk.ctkCollapsibleButton()
        self.collapsible_button.text = "Volume Navigation"

        # Create a layout for the collapsible button
        self.collapsible_layout = qt.QVBoxLayout(self.collapsible_button)

        # Create a frame to contain the buttons
        self.button_frame = qt.QFrame()
        self.button_frame.setFrameShape(qt.QFrame.StyledPanel)  # Add a border to the frame
        self.button_frame.setFrameShadow(qt.QFrame.Raised)  # Set shadow style for the frame
        self.collapsible_layout.addWidget(self.button_frame)

        # Create a layout for the buttons within the frame
        self.button_layout = qt.QVBoxLayout(self.button_frame) #H for horizontal
        self.button_layout.setContentsMargins(10, 10, 10, 10)  # Add margins inside the frame

        # Create push buttons
        self.button_next = qt.QPushButton("Next")
        self.button_back = qt.QPushButton("Back")
        self.button_load_last = qt.QPushButton("Load Last Volume")
        self.button_next.setMaximumWidth(80)  # Set maximum width for the buttons
        self.button_back.setMaximumWidth(80)
        self.button_load_last.setMaximumWidth(120)
        self.button_layout.addWidget(self.button_next)
        self.button_layout.addWidget(self.button_back)
        self.button_layout.addWidget(self.button_load_last)

        # Connect the button's clicked signal to the next_volume,
        # previous_volume, and load_last_volume functions
        self.button_next.connect('clicked()', self.next_volume)
        self.button_back.connect('clicked()', self.previous_volume)
        self.button_load_last.connect('clicked()', self.load_last_volume)

        # Access the volume nodes in the scene
        self.volume_nodes = slicer.mrmlScene.GetNodesByClass('vtkMRMLScalarVolumeNode')
        self.current_volume_index = 0

        # Get the parent collapsible button
        parent_collapsible = slicer.util.findChild(slicer.util.mainWindow(), 'HelpCollapsibleButton')

        # Add the collapsible button to the same parent
        parent_layout = parent_collapsible.parent().layout()
        parent_layout.insertWidget(parent_layout.indexOf(parent_collapsible), self.collapsible_button)

    # TO Note: if reaches last case, become black background and must click on
    # next to show the message.

    def next_volume(self):
        # Load the next volume in the list
        if self.current_volume_index < self.volume_nodes.GetNumberOfItems():
            # Increment the volume index
            self.current_volume_index += 1

            # Display current volume
            self.display_current_volume()

            # Save the current index
            self.VolumeLastViewed()

        elif (self.current_volume_index ==
              self.volume_nodes.GetNumberOfItems()):
            # Reached the end of the volume list
            print("No more volumes to display")
            print("current volume index", self.current_volume_index)
            print("number of items", self.volume_nodes.GetNumberOfItems())

        else :
            print("you should not be here in next_volume")

    def previous_volume(self):
        # Load the previous volume in the list
        if self.current_volume_index > 0:
            # Decrement the volume index
            self.current_volume_index -= 1

            # Display current volume
            self.display_current_volume()

            #Save the current index
            self.VolumeLastViewed()

        else:
            # Reached the beginning of the volume list
            print("Already at the first volume")
            slicer.util.setSliceViewerLayers(background=None)

    def display_current_volume(self):
        # Get the current volume node
        volume_node = self.volume_nodes.GetItemAsObject(
            self.current_volume_index)

        # Display the current volume in the layout
        slicer.util.setSliceViewerLayers(background=volume_node)

    def load_last_volume(self):
        if os.path.lexists(last_volume_file):
            print("config file exists")
            with open(last_volume_file, 'r') as f:
                index = int(f.read())
                print("index:", index)
                print(type(index))
            nb_volume_nodes = self.volume_nodes.GetNumberOfItems()
            if nb_volume_nodes == 0:
                print("pas de noeud")
            else :
                if (index <= nb_volume_nodes):
                    print("index <= nb volume nodes", index, nb_volume_nodes)
                    self.current_volume_index = (index-1)
                    # Display current volume
                    self.display_current_volume()
                elif (index <= 0):
                    print("index <= 0", index, nb_volume_nodes)

        else:
            print("Last volume file not found")

    def VolumeLastViewed(self):
        with open(last_volume_file, 'w') as f:
            f.write(str(self.current_volume_index+1))


# Instantiate the custom widget
volume_viewer = VolumeViewerWidget()
volume_viewer.load_last_volume()
